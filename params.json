{"name":"Seymour","tagline":"Activity feed me, Seymour!","body":"# Seymour\r\n\r\nFeed me activities, Seymour, please!\r\n\r\nSeymour is a library for distributing activity items to  Redis-backed activity feeds\r\nin a Rails application.\r\n\r\n[![Build Status](https://secure.travis-ci.org/rossta/seymour.png)](http://travis-ci.org/rossta/seymour)\r\n\r\n\r\n## Install\r\n\r\nIn your Gemfile\r\n\r\n    gem \"seymour\"\r\n\r\nOr via command line\r\n\r\n    gem install seymour\r\n\r\n\r\n## Overview\r\n\r\nSeymour provides allows an application to distribute activities to a number of interested parties. A typical activity is a small snippet of announcing an \"actor\" performed some action, such as a comment activity in \"Coach Bob commented 'Great game, yesterday'\"\r\n\r\n``` ruby\r\nclass Activity\r\n  belongs_to :actor\r\n  belongs_to :subject, :polymorphic => true\r\n\r\n  feed_me_seymour     # acts_as_activity also works here\r\nend\r\n\r\nclass CommentActivity < Activity\r\n  audience :team      # distributes to TeamFeed by default\r\n  audience :members,  :feed => \"DashboardFeed\"\r\n\r\n  # define methods for the audiences\r\n  delegate :team,     :to => :comment\r\n  delegate :members,  :to => :team\r\n\r\n  def comment\r\n    self.subject\r\n  end\r\nend\r\n```\r\n\r\nDeclaring `feed_me_seymour` in the activity parent class provides `Activity` and its subclasses with the ability to set their `audience`. Activities can have any number of audiences. Each audience must be available as an instance method on comment activities.\r\n\r\n``` ruby\r\nclass TeamFeed < Seymour::Feed\r\nend\r\n\r\nclass DashboardFeed < Seymour::Feed\r\nend\r\n\r\n```\r\n\r\nAt some point, perhaps in a background job, we distribute the activity to our audience. Instances of seymour-enabled classes have a `distribute` method, which adds the activity id to the front of Redis lists activity feeds for each audience member. Seymour expects to find the TeamFeed and DashboardFeed classes at distribution time. Other activities can distribute to the same feeds owned by the same audience members as well.\r\n\r\n``` ruby\r\ncomment   = Comment.create! # 'Great game, yesterday'\r\nactivity  = CommentActivity.create!(:actor => comment.author, :subject => comment)\r\n\r\nactivity.distribute\r\n```\r\n\r\n## Background\r\n\r\nThis library is based on the feed architecture used to distribute activity items at [Weplay](http://weplay.com). Weplay supports activity distribution to a variety of feeds: user dashboards, game day comment pages, global points leaders, etc. The html for each activity item is pre-rendered in a background job. To build a user's dashboard activities, the activity feed needs only to select the activities at the top of the list and output the pre-rendered html for each item, reducing the extra includes and joins needed in-process.\r\n\r\n## TODO\r\n\r\n* generator for activity model + migration\r\n* generator for activity feed\r\n* support rollup\r\n* relevance/affinity sorting","google":"UA-31058047-1","note":"Don't delete this file! It's used internally to help with page regeneration."}